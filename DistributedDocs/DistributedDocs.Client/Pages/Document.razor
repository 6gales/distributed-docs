@page "/documents/{Id}"
@using DistributedDocs.Server.ClientModels
@using System.Text
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3 @_document.DocumentName ></h3>

<textArea
    value="@TextAreaValue" rows="17" cols="110" @oninput="@OnTextChanged"       
>
</textArea>

@code {

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private DocumentInfo _document;
    
    private static string TextAreaValue { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //TODO: Get history
        _document = DocumentManager.GetDocument(Guid.Parse(Id));
        //TextAreaValue = from history
    }

    private async Task OnTextChanged(ChangeEventArgs args)
    {
        var newValue = args.Value.ToString();
        //TODO commit from texts
        var commit = new ClientCommit
        {
            DocumentId = _document.DocumentId
        };
        TextAreaValue = newValue;

        await Http.PostAsJsonAsync("/client/commit", commit);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var clientCommit = await Http.GetFromJsonAsync<ClientCommit>("/client/bind/commit");
        TextAreaValue = new StringBuilder(TextAreaValue)
            .Remove(clientCommit.BeginIndex, clientCommit.EndIndex - clientCommit.BeginIndex)
            .Insert(clientCommit.BeginIndex, clientCommit.String)
            .ToString();
    }
}